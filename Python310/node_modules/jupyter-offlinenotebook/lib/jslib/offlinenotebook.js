import Dexie from 'dexie';
let _repoid = null;
let _repoLabel = null;
let _binderRefUrl = null;
let _binderPersistentUrl = null;
let db = null;
const dbname = 'jupyter-offlinenotebook';
class OfflinenotebookDatabase extends Dexie {
    constructor() {
        super(dbname);
        // Define tables and indexes
        this.version(1).stores({
            offlinenotebook: 'pk, repoid, name, type',
        });
        // The following lines are needed for it to work across typescipt using babel-preset-typescript:
        this.offlinenotebook = this.table('offlinenotebook');
    }
}
export function initialise(data) {
    _repoid = data['repoid'];
    if (_repoid) {
        console.log('offline-notebook repoid: ' + _repoid);
    }
    else {
        console.log('offline-notebook repoid not found, disabled');
    }
    _repoLabel = data['binder_repo_label'] || 'Repo';
    console.log('offline-notebook repoLabel: ' + _repoLabel);
    _binderRefUrl = data['binder_ref_url'];
    console.log('offline-notebook binderRefUrl: ' + _binderRefUrl);
    _binderPersistentUrl = data['binder_persistent_url'];
    console.log('offline-notebook binderPersistentUrl: ' + _binderPersistentUrl);
}
function getDb() {
    if (!db) {
        db = new OfflinenotebookDatabase();
        console.log('offline-notebook: Opened IndexedDB');
    }
    return db;
}
export function saveNotebook(path, nb, success, error) {
    const primaryKey = 'repoid:' + _repoid + ' path:' + path;
    getDb()
        .offlinenotebook.put({
        pk: primaryKey,
        repoid: _repoid,
        name: path.replace(/.*\//, ''),
        path: path,
        format: 'json',
        type: 'notebook',
        content: nb,
    })
        .then((key) => success(key))
        .catch((e) => error(e));
}
export function loadNotebook(path, success, error) {
    const primaryKey = 'repoid:' + _repoid + ' path:' + path;
    getDb()
        .offlinenotebook.get(primaryKey)
        .then((key) => success(key))
        .catch((e) => error(e));
}
// Download https://jsfiddle.net/koldev/cW7W5/
export function downloadNotebookFromBrowser(name, nb) {
    const blob = new Blob([JSON.stringify(nb)], {
        // https://jupyter.readthedocs.io/en/latest/reference/mimetype.html
        type: 'application/x-ipynb+json',
    });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    document.body.appendChild(a);
    a.href = url;
    a.style.display = 'none';
    a.download = name;
    console.log('offlinenotebook: ' + name, blob);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
}
export function openBinderRepo() {
    const a = document.createElement('a');
    document.body.appendChild(a);
    a.href = _binderRefUrl;
    a.target = '_blank';
    a.style.display = 'none';
    a.click();
    document.body.removeChild(a);
}
export function repoid() {
    return _repoid;
}
export function repoLabel() {
    return _repoLabel;
}
export function binderRefUrl() {
    return _binderRefUrl;
}
export function binderPersistentUrl() {
    return _binderPersistentUrl;
}
